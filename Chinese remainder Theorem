// A Java program to demonstrate the working of Chinese remainder
// Theorem
import java.io.*;

class Main {
	
	// k is size of num[] and rem[]. Returns the smallest
	// number x such that:
	// x % num[0] = rem[0],
	// x % num[1] = rem[1],
	// ..................
	// x % num[k-2] = rem[k-1]
	// Assumption: Numbers in num[] are pairwise coprime
	// (gcd for every pair is 1)
	static int findMinX(int num[], int rem[], int k)
	{
		int x = 1; 
	

		while (true)
		{
	
			int j;
			for (j=0; j<k; j++ )
				if (x%num[j] != rem[j]){System.out.println(x);
				break;}
	
			// If all remainders matched, we found x
			if (j == k)
				return x;
	
			// Else try next number
			x++;
		}
	
	}

	public static void main(String args[])
	{
		int num[] = {5, 7};
       int rem[] = {1, 3};
		int k = num.length;
		System.out.println("x is " + findMinX(num, rem, k));
	}
}
---------------------------------------------------------------------

import java.io.*;

class Main {
	
	static int findMinX(int num[], int rem[], int k)
	{
		int x = 1; 
	int ans=1;
        for(int i=0;i<k;i++)
            ans=ans*num[i];
        //System.out.println(ans);
		while (x<=ans)
		{
	
			int j;
			for (j=0; j<k; j++ )
				if (x%num[j] != rem[j])
				break;
	
			if (j == k)
				return x;
	
			x++;
           // System.out.println(x);
		}
	if(x<ans)
	return x;
        else
        return -1;
	}

	public static void main(String args[])
	{
		int num[] = {6, 8,9,3};
       int rem[] = {1, 3,2,1};
		int k = num.length;
		System.out.println("x is " + findMinX(num, rem, k));
	}
}
