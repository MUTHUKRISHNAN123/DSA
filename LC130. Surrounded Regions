130. Surrounded Regions

Given an m x n matrix board containing 'X' and 'O', capture all regions that are 4-directionally surrounded by 'X'.

A region is captured by flipping all 'O's into 'X's in that surrounded region.

 

Example 1:


Input: board = [["X","X","X","X"],["X","O","O","X"],["X","X","O","X"],["X","O","X","X"]]
Output: [["X","X","X","X"],["X","X","X","X"],["X","X","X","X"],["X","O","X","X"]]
Explanation: Notice that an 'O' should not be flipped if:
- It is on the border, or
- It is adjacent to an 'O' that should not be flipped.
The bottom 'O' is on the border, so it is not flipped.
The other three 'O' form a surrounded region, so they are flipped.
Example 2:

Input: board = [["X"]]
Output: [["X"]]
 

Constraints:

m == board.length
n == board[i].length
1 <= m, n <= 200
board[i][j] is 'X' or 'O'.
----------------------------------------------------------------------------------
class Solution {
    public void solve(char[][] board) {
        if(board == null || board.length==0)
            return;
        int m = board.length;
        int n = board[0].length;
        //merge O’s on left & right boarder
        for(int i=0;i<m;i++)
        {
            if(board[i][0] == 'O')
            {
                merge(board, i, 0);
            }
            if(board[i][n-1] == 'O')
            {
                merge(board, i,n-1);
            }
        }
        //merge O’s on top & bottom boarder
        for(int j=0; j<n; j++)
        {
            if(board[0][j] == 'O')
            {
                merge(board, 0,j);
            }
            if(board[m-1][j] == 'O')
            {
                merge(board, m-1,j);
            }
        }
        //process the board
        for(int i=0;i<m;i++)
        {
            for(int j=0; j<n; j++)
            {
                if(board[i][j] == 'O')
                {
                    board[i][j] = 'X';
                }
                else if(board[i][j] == '#')
                {
                    board[i][j] = 'O';
                }
            }
        }
    }
    public void merge(char[][] board, int i, int j){
        if(i<0 || i>=board.length || j<0 || j>=board[0].length)
            return;
        if(board[i][j] != 'O')
            return;
        board[i][j] = '#';
        merge(board, i-1, j);
        merge(board, i+1, j);
        merge(board, i, j-1);
        merge(board, i, j+1);
    }
}
